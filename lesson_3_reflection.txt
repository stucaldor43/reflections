1) When would you want to use a remote repository rather than keeping all your
  work local?

  If you are working with other people then having a remote repository is very
  useful because it makes it much easier for everyone to collaborate with one
  another.

2) Why might you want to always pull changes manually rather than having Git
  automatically stay up-to-date with your remote repository?

  There may be situations where for some reason or another you don't want the
  branch that you are working on to be updated with the latest code changes.

3) Describe the differences between forks, clones, and branches. When would you
  use one instead of another?

  Fork creates a copy of the files within a given repository, creates a new
  repository on your Github account, and places the copies within the newly
  created repository. Clone copies the files from a given repository into the
  specified directory on your computer. Branches store commit history. All
  changes to a given branch only affect that branch.

  You use clone if you want to collaborate with the owner of a given repository
  (pushing/pulling have to be approved by them). Fork is used if you just want to
  use the files within a repository for yourself. Use branches if you are
  working on something which you don't want on the main branch.

4) What is the benefit of having a copy of the last known state of the remote
stored locally?

  It allows Git to determine how many commits the current branch is ahead(or
  behind) the remote repository. It also allows you to see the effect that
  merging with the remote repository branch will have on the current branch.
  If you won't have access to the internet for a while it allows you to still
  view the changes made to the remote repository at the last time you synced.
  Lastly, it allows you to merge while offline and access the log of commits for
  the remote repository.

5) How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?

  You could use another version control system such as Google Docs or Dropbox.
  Both Docs and Dropbox would make it easier to make changes because you don't
  have to remember commands but the trade off would be that they would make it
  harder for people to work on the same part of the code effectively because
  people would have to manually identify conflicting code and find a resolution
  that doesn't introduce bugs. Some of the others can't help you resolve
  conflicts as easily so merging would be harder when a conflict occurs.
